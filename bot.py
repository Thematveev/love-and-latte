import telebot
from telebot import types
from config import TOKEN, POSTER_TOKEN
from db import init_db, add_or_update_user, get_user
from api_client import Client
import logging
from new_check_monitor import run_monitor
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
client = Client(POSTER_TOKEN)
bot = telebot.TeleBot(TOKEN)
init_db()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"))
    return markup


# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    logging.info(f"/start –≤—ñ–¥ user_id={message.chat.id}")
    user = get_user(message.chat.id)
    if user:
        bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.", reply_markup=main_menu())
        logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user}")
    else:
        bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é! –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
        bot.register_next_step_handler(message, get_name)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
def get_name(message):
    name = message.text.strip()
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —ñ–º'—è –≤—ñ–¥ user_id={message.chat.id}: {name}")
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=phone_keyboard())
    bot.register_next_step_handler(message, get_phone, name)


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def phone_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)
    markup.add(button)
    return markup


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def get_phone(message, name):
    user_id = message.chat.id

    if message.contact and message.contact.phone_number.startswith("38"):
        phone = "+" + message.contact.phone_number
    elif message.text and message.text.startswith("+38"):
        phone = message.text.strip()
    else:
        bot.send_message(user_id, "–ù–æ–º–µ—Ä –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ +38. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        logging.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –≤—ñ–¥ user_id={user_id}: {message.text}")
        bot.register_next_step_handler(message, get_phone, name)
        return

    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—ñ–¥ user_id={user_id}: {phone}")

    try:
        existing_info = client.get_client_by_phone(phone)
        if existing_info:
            poster_id = existing_info['client_id']
            logging.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: poster_id={poster_id} –¥–ª—è user_id={user_id}")
        else:
            crm_response = client.create_new_client(name, phone)
            print(crm_response)
            poster_id = crm_response['response']  # ‚Üê –æ—Ç—Ä–∏–º–∞–Ω–∏–π poster_id
            logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ CRM: poster_id={poster_id} –¥–ª—è user_id={user_id}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –≤ CRM: {e}")
        bot.send_message(user_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —É CRM. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    add_or_update_user(user_id, poster_id, name=name, phone=phone)
    bot.send_message(user_id, "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"
@bot.message_handler(func=lambda m: m.text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
def profile(message):
    user_id = message.chat.id
    user = get_user(user_id)
    if user:
        try:
            crm_data = client.get_client_by_id(user["poster_id"])
            bonuses = crm_data.get("bonus", 0)
            msg = (
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\n"
                f"üìõ –Ü–º'—è: {user['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
                f"üéÅ –ë–æ–Ω—É—Å–∏: {bonuses}\n"
                # f"üÜî Poster ID: {user["poster_id"]}"
            )
            logging.info(f"–ü—Ä–æ—Ñ—ñ–ª—å –∑–∞–ø—Ä–æ—à–µ–Ω–æ user_id={user_id}")
            bot.send_message(user_id, msg)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ CRM –¥–ª—è user_id={user_id}: {e}")
            bot.send_message(user_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ CRM.")
    else:
        logging.info(f"–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º user_id={user_id}")
        bot.send_message(user_id, "–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    monitor_thread = Thread(target=run_monitor, args=(10,), daemon=True)
    monitor_thread.start()
    bot.polling()
